## Copyright @Arista Networks 2024 ##
## Author : Tejaswi Haramurali (tejh) ##

# This is a GitHub Workflow that helps verify commits #
# using the user's GPG public keys. #

name: GPG Signature Verification

# Workflow will be triggered during Pull Requests on main branch #
on:  
  pull_request:
    branches: [ "main" ]
    
env:
  # Commit hash that triggered the workflow
  COMMIT_HASH: ${{ github.event.pull_request.head.sha }}
  REPO_NAME: "${GITHUB_REPOSITORY#*/}"
  ORGANIZATION_NAME: "aristanetworks"

jobs:
  # This job provides signature verification of commits
  verify:
    # Change this to ubuntu-latest to use GitHub's runners if required
    runs-on: self-hosted

    steps:
      - name: Debug information
        run: |
          echo "Organization login: ${{ github.event.pull_request.head.repo.owner.login }}"
          if [ "${{ github.event.pull_request.head.repo.owner.login }}" != "${{ env.ORGANIZATION_NAME }}" ]; then
            echo "Arista Networks is NOT the GitHub organization"
          else
            echo "Arista Networks is the GitHub organization"
          fi

      - if: ${{ github.event.pull_request.head.repo.owner.login != env.ORGANIZATION_NAME }}
        uses: actions/checkout@v3
        with:  
          repository: "${{ github.event.pull_request.head.repo.owner.login }}/${{ github.event.pull_request.head.repo.name }}"
          ref: ${{ github.head_ref }}
          token: ${{ secrets.ARISTA_WORKFLOW_SECRET }}
          fetch-depth: 0

      - if: ${{ github.event.pull_request.head.repo.owner.login == env.ORGANIZATION_NAME }}
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.head_ref }}
          token: ${{ secrets.ARISTA_WORKFLOW_SECRET }}  
          fetch-depth: 0
          
      - name: Display the commit hash & branch that triggered this process
        run: echo "Triggering workflow for branch ${{ github.ref }} and commit-hash ${{ github.event.pull_request.head.sha }}"

      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
          echo "Base branch: ${{ github.event.pull_request.base.ref }}"
          echo "BASE_LATEST_COMMIT=$(git rev-parse ${{ github.event.pull_request.base.ref }})"

      - name: Retrieving and storing access token
        run: |
          curl --header "X-Vault-Namespace: anet/sw/sec/developer-pgp" --request POST --data '{"role_id": "${{ secrets.ROLE_ID }}","secret_id": "${{ secrets.SECRET_ID }}"}' https://vault.aristanetworks.com:8200/v1/auth/approle/login | jq -r '.auth.client_token' > token.txt
          TOKEN=$(cat token.txt)
          echo "TOKEN=${TOKEN}" >> $GITHUB_ENV
          
      - name: Print list of to-be-processed commits
        run: |
          base_branch="${{ github.event.pull_request.base.ref }}"
          for commit_sha in $(git log --pretty=format:%H $base_branch..${{ github.event.pull_request.head.sha }}); do
            echo "To be processed - commit $commit_sha"
          done
          
      - name: Verify all the commits in the PR using the commiter's signature
        id: signature_verification_all
        run: |
          base_branch="${{ github.event.pull_request.base.ref }}"
          for commit_sha in $(git log --pretty=format:%H $base_branch..${{ github.event.pull_request.head.sha }}); do
            echo "Processing commit $commit_sha"

            ## Check if the commit has any diff with the base branch ##
            DIFF=$(git diff origin/$base_branch...$commit_sha)
            if [ -z "$DIFF" ]; then
              echo "Commit $commit_sha introduces no changes to main, skipping..."
              continue
            fi
            
            ## Checking if the User has a valid Arista email ID ##
            committer_email=$(git show --format='%ce' -s "$commit_sha")
            if [[ "$committer_email" =~ .*@arista\.com ]]; then
              echo "User has a valid Arista email ID."
            else
              echo "User's email ID does not end with @arista.com."
              exit 1
            fi

            ## Retrieving the user's Arista ID ##
            username="${committer_email%%@*}"
            echo "Committer's ID is ${username}"

            ## Retrieving & importing the user's public key from the Vault ## 
            USER_ID="${username}"
            TOKEN="${{ env.TOKEN }}"
            curl --header "X-Vault-Namespace: anet/sw/sec/developer-pgp" --header "X-Vault-Token: ${TOKEN}" --request GET https://vault.aristanetworks.com:8200/v1/gpg/keys/${USER_ID} | jq -r '.data.public_key' | gpg --import
            gpg --list-keys

            ## Verifying the commit using the user's public key ##
            if ! git verify-commit -v $commit_sha; then
              echo "Commit $commit_sha does not have a valid GPG signature."
              exit 1
            fi
          done
          
      - name: Add Label on Success
        if: steps.signature_verification_all.outcome == 'success'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.ARISTA_WORKFLOW_SECRET }}
          script: |
            const pullRequest = context.payload.pull_request;
            // Add the "Signature-Verified" label
            github.issues.addLabels({
              owner: pullRequest.base.repo.owner.login,
              repo: pullRequest.base.repo.name,
              issue_number: pullRequest.number,
              labels: ['Signature-Verified']
            });
